{"version":3,"file":"index.js","sources":["../../src/optimistic/state/documentMutator.ts","../../src/optimistic/state/datasetMutator.ts","../../src/optimistic/context.ts"],"sourcesContent":["import type {SanityClient} from '@sanity/client'\nimport {SanityEncoder, type Transaction} from '@sanity/mutate'\nimport {\n  documentMutatorMachine,\n  type DocumentMutatorMachineParentEvent,\n} from '@sanity/mutate/_unstable_machine'\nimport {enqueueActions, fromPromise} from 'xstate'\nimport type {VisualEditingNode} from '../../types'\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const createDocumentMutator = (comlink: VisualEditingNode) => {\n  const fetchSnapshot = fromPromise(\n    async ({input, signal}: {input: {id: string; client: SanityClient}; signal: AbortSignal}) => {\n      const {id} = input\n      const {snapshot} = await comlink.fetch(\n        'visual-editing/fetch-snapshot',\n        {documentId: id},\n        {\n          signal,\n        },\n      )\n      return snapshot\n    },\n  )\n\n  const submitMutations = fromPromise(\n    async ({input}: {input: {client: SanityClient; transactions: Transaction[]}}) => {\n      const {transactions} = input\n      for (const transaction of transactions) {\n        const data = SanityEncoder.encodeTransaction(transaction)\n        return comlink.post('visual-editing/mutate', data)\n      }\n    },\n  )\n\n  return documentMutatorMachine.provide({\n    actions: {\n      'send sync event to parent': enqueueActions(({enqueue}) => {\n        // Original action provided by the `documentMutatorMachine`\n        enqueue.sendParent(\n          ({context}) =>\n            ({\n              type: 'sync',\n              id: context.id,\n              document: context.remote!,\n            }) satisfies DocumentMutatorMachineParentEvent,\n        )\n        // Additional action so that we can determine when the snapshot is ready\n        enqueue.emit(({context}) => ({type: 'ready', snapshot: context.local}))\n      }),\n    },\n    actors: {\n      'fetch remote snapshot': fetchSnapshot,\n      'submit mutations as transactions': submitMutations,\n    },\n  })\n}\n","/**\n * The logic here is intended to live inside a preview iframe, and listen to events from the parent frame.\n * It also supports running in a \"detached\" mode, where it has to setup authenticated EventSource conenctions and perform data fetching itself.\n */\n\nimport {type SanityClient} from '@sanity/client'\nimport {\n  createSharedListener,\n  documentMutatorMachine,\n  type DocumentMutatorMachineInput,\n  type DocumentMutatorMachineParentEvent,\n} from '@sanity/mutate/_unstable_machine'\nimport {assertEvent, assign, emit, setup, stopChild, type ActorRefFrom} from 'xstate'\nimport type {VisualEditingNode} from '../../types'\nimport {createDocumentMutator} from './documentMutator'\n\nexport interface DatasetMutatorMachineInput extends Omit<DocumentMutatorMachineInput, 'id'> {\n  client: SanityClient\n  /** A shared listener can be provided, if not it'll be created using `client.listen()` */\n  sharedListener?: ReturnType<typeof createSharedListener>\n}\n\nexport const datasetMutatorMachine = setup({\n  types: {} as {\n    context: {\n      client: SanityClient\n      /** A shared listener can be provided, if not it'll be created using `client.listen()` */\n      sharedListener?: ReturnType<typeof createSharedListener>\n      documents: Record<string, ActorRefFrom<ReturnType<typeof createDocumentMutator>>>\n    }\n    events:\n      | {type: 'observe'; documentId: string}\n      | {type: 'unobserve'; documentId: string}\n      | {type: 'add document actor'; documentId: string}\n      | {type: 'stop document actor'; documentId: string}\n      | DocumentMutatorMachineParentEvent\n    input: DatasetMutatorMachineInput\n    emitted: DocumentMutatorMachineParentEvent\n  },\n  actions: {\n    'emit sync event': emit(({event}) => {\n      assertEvent(event, 'sync')\n      return event\n    }),\n    'emit mutation event': emit(({event}) => {\n      assertEvent(event, 'mutation')\n      return event\n    }),\n    'emit rebased event': emit(({event}) => {\n      assertEvent(event, ['rebased.local', 'rebased.remote'])\n      return event\n    }),\n    'emit pristine event': emit(({event}) => {\n      assertEvent(event, ['pristine'])\n      return event\n    }),\n    'add document actor': assign({\n      documents: ({context, event, spawn}) => {\n        assertEvent(event, 'observe')\n        const id = event.documentId\n        // Adding the same documentId multiple times is a no-op\n        if (context.documents[id]) return context.documents\n        return {\n          ...context.documents,\n          [id]: spawn('documentMutatorMachine', {\n            input: {\n              id,\n              client: context.client,\n              sharedListener: context.sharedListener || createSharedListener(context.client),\n            },\n            id,\n          }),\n        }\n      },\n    }),\n    'stop remote snapshot': stopChild(({context, event}) => {\n      assertEvent(event, 'unobserve')\n      return context.documents[event.documentId]!\n    }),\n    'remove remote snapshot from context': assign({\n      documents: ({context, event}) => {\n        assertEvent(event, 'unobserve')\n        // Removing a non-existing documentId is a no-op\n        if (!context.documents[event.documentId]) return context.documents\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const {[event.documentId]: _, ...documents} = context.documents\n        return documents\n      },\n    }),\n  },\n  actors: {\n    documentMutatorMachine,\n  },\n}).createMachine({\n  /** @xstate-layout N4IgpgJg5mDOIC5QBsD2BjAhsgIhgrgLZgB2ALgMTICWsZpA2gAwC6ioADqrNWdaiXYgAHogC0ADgBMAOgkA2ACyKArBICcTdfKXSANCACeiFQHYZpgMxWV800yYqp6gIyn5AXw8G0WXAWJyCnwSGjpGViEuHj4BIVEEKUt5OSlFU1smFwkFW0sDY0T1GRUXRXkXKVN7HSYJJkUvHwxsPHQiUjIZDgAnWj4SMApCfDJMemY2JBBo3n5BaYSXeVlbKRUsiXdFSxcXfKNERSqZTbr1zVMJNyaQX1aAzpkIah6yQwp0VEJCXkmo7hzOKLRDLFwyFxaSzXKTOKQudSKCQFRDOczqCSWJjwjbHCQqRFebwgEioCBwIT3fztQJkAExebxcQuFEIZaWGRIrF7dSXKTyFSNYlUtodcjdPp0aiDelAhagBLpVmWAmc46mNwSZTyLQuFS3EWPcUvN6FTiA2LykSoq6c6wbCqVUzparKioyRFVfkq1zqNSWIkeIA */\n  id: 'dataset-mutator',\n  context: ({input}) => ({\n    documents: {},\n    client: input.client,\n    sharedListener: input.sharedListener,\n  }),\n\n  on: {\n    'sync': {actions: ['emit sync event']},\n    'mutation': {actions: ['emit mutation event']},\n    'rebased.*': {actions: ['emit rebased event']},\n    'pristine': {actions: ['emit pristine event']},\n    'observe': {\n      actions: ['add document actor'],\n    },\n    'unobserve': {\n      actions: ['stop remote snapshot', 'remove remote snapshot from context'],\n    },\n  },\n\n  initial: 'pristine',\n\n  states: {\n    pristine: {},\n  },\n})\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const createDatasetMutator = (comlink: VisualEditingNode) => {\n  return datasetMutatorMachine.provide({\n    actors: {\n      documentMutatorMachine: createDocumentMutator(comlink),\n    },\n  })\n}\n","import {createEmptyActor, type ActorRefFrom} from 'xstate'\nimport {createDatasetMutator} from './state/datasetMutator'\n\nexport type MutatorActor = ActorRefFrom<ReturnType<typeof createDatasetMutator>>\nexport type EmptyActor = typeof emptyActor\n\nexport const emptyActor = createEmptyActor()\n\nexport let actor: MutatorActor | EmptyActor = emptyActor\n\nexport const listeners = new Set<() => void>()\n\nexport function isEmptyActor(actor: MutatorActor | EmptyActor): actor is EmptyActor {\n  return actor === emptyActor\n}\n\nexport function setActor(nextActor: MutatorActor): void {\n  actor = nextActor\n  for (const onActorChange of listeners) {\n    onActorChange()\n  }\n}\n"],"names":["fromPromise","enqueueActions","setup","emit","assertEvent","assign","stopChild","createEmptyActor","documentMutatorMachine","createSharedListener","SanityEncoder","createDocumentMutator","comlink","fetchSnapshot","async","input","signal","id","snapshot","fetch","documentId","submitMutations","transactions","transaction","data","encodeTransaction","post","provide","actions","enqueue","sendParent","context","type","document","remote","local","actors","datasetMutatorMachine","types","event","documents","spawn","client","sharedListener","_","createMachine","on","sync","mutation","pristine","observe","unobserve","initial","states","createDatasetMutator","emptyActor","actor","listeners","Set","isEmptyActor","setActor","nextActor","onActorChange"],"mappings":"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"}