import{fromPromise as t,enqueueActions as e,setup as n,emit as o,assertEvent as s,assign as i,stopChild as c,createEmptyActor as a}from"xstate";import{documentMutatorMachine as r,createSharedListener as m}from"@sanity/mutate/_unstable_machine";import{SanityEncoder as u}from"@sanity/mutate";const d=n=>{const o=t((async({input:t,signal:e})=>{const{id:o}=t,{snapshot:s}=await n.fetch("visual-editing/fetch-snapshot",{documentId:o},{signal:e});return s})),s=t((async({input:t})=>{const{transactions:e}=t;for(const t of e){const e=u.encodeTransaction(t);return n.post("visual-editing/mutate",e)}}));return r.provide({actions:{"send sync event to parent":e((({enqueue:t})=>{t.sendParent((({context:t})=>({type:"sync",id:t.id,document:t.remote}))),t.emit((({context:t})=>({type:"ready",snapshot:t.local})))}))},actors:{"fetch remote snapshot":o,"submit mutations as transactions":s}})},p=n({types:{},actions:{"emit sync event":o((({event:t})=>(s(t,"sync"),t))),"emit mutation event":o((({event:t})=>(s(t,"mutation"),t))),"emit rebased event":o((({event:t})=>(s(t,["rebased.local","rebased.remote"]),t))),"emit pristine event":o((({event:t})=>(s(t,["pristine"]),t))),"add document actor":i({documents:({context:t,event:e,spawn:n})=>{s(e,"observe");const o=e.documentId;return t.documents[o]?t.documents:{...t.documents,[o]:n("documentMutatorMachine",{input:{id:o,client:t.client,sharedListener:t.sharedListener||m(t.client)},id:o})}}}),"stop remote snapshot":c((({context:t,event:e})=>(s(e,"unobserve"),t.documents[e.documentId]))),"remove remote snapshot from context":i({documents:({context:t,event:e})=>{if(s(e,"unobserve"),!t.documents[e.documentId])return t.documents;const{[e.documentId]:n,...o}=t.documents;return o}})},actors:{documentMutatorMachine:r}}).createMachine({id:"dataset-mutator",context:({input:t})=>({documents:{},client:t.client,sharedListener:t.sharedListener}),on:{sync:{actions:["emit sync event"]},mutation:{actions:["emit mutation event"]},"rebased.*":{actions:["emit rebased event"]},pristine:{actions:["emit pristine event"]},observe:{actions:["add document actor"]},unobserve:{actions:["stop remote snapshot","remove remote snapshot from context"]}},initial:"pristine",states:{pristine:{}}}),v=t=>p.provide({actors:{documentMutatorMachine:d(t)}}),h=a();let l=h;const f=/* @__PURE__ */new Set;function y(t){return t===h}function b(t){l=t;for(const t of f)t()}export{l as actor,v as createDatasetMutator,d as createDocumentMutator,h as emptyActor,y as isEmptyActor,f as listeners,b as setActor};//# sourceMappingURL=index.js.map
