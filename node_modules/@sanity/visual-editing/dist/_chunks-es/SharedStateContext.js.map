{"version":3,"file":"SharedStateContext.js","sources":["../../src/react/useOptimistic.ts","../../../../node_modules/.pnpm/uuid@11.0.5/node_modules/uuid/dist/esm-browser/stringify.js","../../../../node_modules/.pnpm/uuid@11.0.5/node_modules/uuid/dist/esm-browser/rng.js","../../../../node_modules/.pnpm/uuid@11.0.5/node_modules/uuid/dist/esm-browser/native.js","../../src/util/geometry.ts","../../src/util/dragAndDrop.ts","../../src/util/elements.ts","../../src/util/stega.ts","../../src/util/findSanityNodes.ts","../../src/controller.ts","../../../../node_modules/.pnpm/uuid@11.0.5/node_modules/uuid/dist/esm-browser/v4.js","../../src/ui/shared-state/SharedStateContext.ts"],"sourcesContent":["import {getPublishedId} from '@sanity/client/csm'\nimport type {SanityDocument} from '@sanity/types'\nimport {startTransition, useEffect, useState} from 'react'\nimport {useEffectEvent} from 'use-effect-event'\nimport {isEmptyActor} from '../optimistic/context'\nimport type {OptimisticReducer, OptimisticReducerAction} from '../optimistic/types'\nimport {useOptimisticActor} from './useOptimisticActor'\n\nexport function useOptimistic<T, U = SanityDocument>(\n  passthrough: T,\n  reducer: OptimisticReducer<T, U> | Array<OptimisticReducer<T, U>>,\n): T {\n  const [pristine, setPristine] = useState(true)\n  const [optimistic, setOptimistic] = useState<T>(passthrough)\n  const [lastEvent, setLastEvent] = useState<OptimisticReducerAction<U> | null>(null)\n  const [lastPassthrough, setLastPassthrough] = useState<T>(passthrough)\n\n  const actor = useOptimisticActor()\n\n  /**\n   * This action is used in two `useEffect` hooks, it needs access to the provided `reducer`,\n   * but doesn't want to cause re-renders if `reducer` changes identity.\n   * The `useEffectEvent` hook ensures that the `reducer` value is never stale when used, and doesn't trigger setup and teardown of\n   * `useEffect` deps to make it happen.\n   */\n  const reduceStateFromAction = useEffectEvent(\n    (action: OptimisticReducerAction<U>, prevState: T) => {\n      const reducers = Array.isArray(reducer) ? reducer : [reducer]\n      return reducers.reduce(\n        (acc, reducer) =>\n          reducer(acc, {\n            document: action.document,\n            id: getPublishedId(action.id),\n            originalId: action.id,\n            type: action.type,\n          }),\n        prevState,\n      )\n    },\n  )\n\n  /**\n   * Records the last passthrough value when reducers ran in response to a rebased event.\n   * This allows us to later know when reducers should run should the passthrough change.\n   */\n  const updateLastPassthrough = useEffectEvent(() => setLastPassthrough(passthrough))\n\n  /**\n   * Handle rebase events, which runs the provided reducers,\n   * caches the event that was used to produce the new state,\n   * and marks the state as non-pristine.\n   */\n  useEffect(() => {\n    // If the actor hasn't been set yet, we don't need to subscribe to mutations\n    if (isEmptyActor(actor)) {\n      return\n    }\n\n    /**\n     * The pristine event fires much too soon, so the temporary workaround is that we greatly delay firing `setPristine(true)`,\n     * and instead relying on re-running reducers with the last event whenever the passthrough changes, to preserve the optimistic state,\n     * until we hopefully have eventual consistency on the passthrough.\n     */\n    let pristineTimeout: ReturnType<typeof setTimeout>\n\n    const rebasedSub = actor.on('rebased.local', (_event) => {\n      const event = {\n        // @todo You shall not cast\n        document: _event.document as U,\n        id: _event.id,\n        originalId: getPublishedId(_event.id),\n        // @todo This should eventually be emitted by the state machine\n        type: 'mutate' as const,\n      }\n      setOptimistic((prevState) => reduceStateFromAction(event, prevState))\n      setLastEvent(event)\n      updateLastPassthrough()\n      setPristine(false)\n\n      clearTimeout(pristineTimeout)\n    })\n    const pristineSub = actor.on('pristine', () => {\n      pristineTimeout = setTimeout(() => {\n        // Marking it in a startTransition allows react to interrupt the resulting render, should a new rebase happen and we're back to dirty\n        startTransition(() => setPristine(true))\n      }, 15000)\n    })\n    return () => {\n      rebasedSub.unsubscribe()\n      pristineSub.unsubscribe()\n    }\n  }, [actor, reduceStateFromAction, updateLastPassthrough])\n\n  /**\n   * If the passthrough changes, and we are in a dirty state, we rerun the reducers with the new passthrough but the previous event.\n   * Marking it in a transition allows react to interrupt this render should a new action happen, or should we be back in a pristine state.\n   */\n  useEffect(() => {\n    if (pristine) {\n      // if we are pristine, then we will passthrough anyway\n      return undefined\n    }\n    if (!lastEvent) {\n      // If we don't have a lastEvent when we are pristine, it's a fatal error\n      throw new Error('No last event found when syncing passthrough')\n    }\n    if (lastPassthrough === passthrough) {\n      // If the passthrough hasn't changed, then we don't need to rerun the reducers\n      return undefined\n    }\n\n    // Marking it in a startTransition allows react to interrupt the resulting render, should a new rebase happen\n    startTransition(() => {\n      setOptimistic(reduceStateFromAction(lastEvent, passthrough))\n      setLastPassthrough(passthrough)\n    })\n  }, [lastEvent, lastPassthrough, passthrough, pristine, reduceStateFromAction])\n\n  return pristine ? passthrough : optimistic\n}\n","import validate from './validate.js';\nconst byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n    byteToHex.push((i + 0x100).toString(16).slice(1));\n}\nexport function unsafeStringify(arr, offset = 0) {\n    return (byteToHex[arr[offset + 0]] +\n        byteToHex[arr[offset + 1]] +\n        byteToHex[arr[offset + 2]] +\n        byteToHex[arr[offset + 3]] +\n        '-' +\n        byteToHex[arr[offset + 4]] +\n        byteToHex[arr[offset + 5]] +\n        '-' +\n        byteToHex[arr[offset + 6]] +\n        byteToHex[arr[offset + 7]] +\n        '-' +\n        byteToHex[arr[offset + 8]] +\n        byteToHex[arr[offset + 9]] +\n        '-' +\n        byteToHex[arr[offset + 10]] +\n        byteToHex[arr[offset + 11]] +\n        byteToHex[arr[offset + 12]] +\n        byteToHex[arr[offset + 13]] +\n        byteToHex[arr[offset + 14]] +\n        byteToHex[arr[offset + 15]]).toLowerCase();\n}\nfunction stringify(arr, offset = 0) {\n    const uuid = unsafeStringify(arr, offset);\n    if (!validate(uuid)) {\n        throw TypeError('Stringified UUID is invalid');\n    }\n    return uuid;\n}\nexport default stringify;\n","let getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n    if (!getRandomValues) {\n        if (typeof crypto === 'undefined' || !crypto.getRandomValues) {\n            throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n        }\n        getRandomValues = crypto.getRandomValues.bind(crypto);\n    }\n    return getRandomValues(rnds8);\n}\n","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default { randomUUID };\n","import type {OverlayRect, Point2D, Ray2D} from '../types'\n\nexport function getRect(element: Element): OverlayRect {\n  const domRect = element.getBoundingClientRect()\n\n  const rect = {\n    x: domRect.x + scrollX,\n    y: domRect.y + scrollY,\n    w: domRect.width,\n    h: domRect.height,\n  }\n\n  return rect\n}\n\nexport function offsetRect(rect: OverlayRect, px: number, axis: 'x' | 'y'): OverlayRect {\n  if (axis === 'x') {\n    return {\n      x: rect.x + px,\n      y: rect.y,\n      w: rect.w - 2 * px,\n      h: rect.h,\n    }\n  } else {\n    return {\n      x: rect.x,\n      y: rect.y + px,\n      w: rect.w,\n      h: rect.h - 2 * px,\n    }\n  }\n}\n\n// Ref http://paulbourke.net/geometry/pointlineplane/\nexport function rayIntersect(l1: Ray2D, l2: Ray2D): Point2D | false {\n  const {x1, y1, x2, y2} = l1\n  const {x1: x3, y1: y3, x2: x4, y2: y4} = l2\n\n  // Check if none of the lines are of length 0\n  if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {\n    return false\n  }\n\n  const denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1)\n\n  // Lines are parallel\n  if (denominator === 0) {\n    return false\n  }\n\n  const ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator\n  const ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator\n\n  // is the intersection along the segments\n  if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {\n    return false\n  }\n\n  const x = x1 + ua * (x2 - x1)\n  const y = y1 + ua * (y2 - y1)\n\n  return {x, y}\n}\n\nexport function rectEqual(r1: OverlayRect, r2: OverlayRect): boolean {\n  return r1.x === r2.x && r1.y === r2.y && r1.w === r2.w && r1.h === r2.h\n}\n\nexport function rayRectIntersections(line: Ray2D, rect: OverlayRect): Array<Point2D> | false {\n  const rectLines: Array<Ray2D> = [\n    {x1: rect.x, y1: rect.y, x2: rect.x + rect.w, y2: rect.y},\n    {\n      x1: rect.x + rect.w,\n      y1: rect.y,\n      x2: rect.x + rect.w,\n      y2: rect.y + rect.h,\n    },\n    {\n      x1: rect.x + rect.w,\n      y1: rect.y + rect.h,\n      x2: rect.x,\n      y2: rect.y + rect.h,\n    },\n    {\n      x1: rect.x,\n      y1: rect.y + rect.h,\n      x2: rect.x,\n      y2: rect.y,\n    },\n  ]\n\n  const intersections: Array<Point2D> = []\n\n  for (let i = 0; i < rectLines.length; i++) {\n    const intersection = rayIntersect(line, rectLines[i])\n\n    if (intersection) {\n      let isDuplicate = false\n\n      for (let j = 0; j < intersections.length; j++) {\n        if (intersections[j].x === intersection.x && intersections[j].y === intersection.y) {\n          isDuplicate = true\n        }\n      }\n\n      if (!isDuplicate) intersections.push(intersection)\n    }\n  }\n\n  if (intersections.length === 0) {\n    return false\n  }\n\n  return intersections.sort(\n    (a, b) => pointDist(a, {x: line.x1, y: line.y1}) - pointDist(b, {x: line.x1, y: line.y1}),\n  )\n}\nexport function pointDist(p1: Point2D, p2: Point2D): number {\n  const a = p1.x - p2.x\n  const b = p1.y - p2.y\n\n  return Math.sqrt(a * a + b * b)\n}\n\nexport function pointInBounds(point: Point2D, bounds: OverlayRect): boolean {\n  const withinX = point.x >= bounds.x && point.x <= bounds.x + bounds.w\n  const withinY = point.y >= bounds.y && point.y <= bounds.y + bounds.h\n\n  return withinX && withinY\n}\n\nexport function findClosestIntersection(\n  ray: Ray2D,\n  targets: OverlayRect[],\n  flow: string,\n): OverlayRect | null {\n  const rayOrigin = {\n    x: ray.x1,\n    y: ray.y1,\n  }\n\n  // Offset rects to ensure raycasting works when siblings touch\n  if (\n    targets.some((t) =>\n      pointInBounds(\n        rayOrigin,\n        offsetRect(t, Math.min(t.w, t.h) / 10, flow === 'horizontal' ? 'x' : 'y'),\n      ),\n    )\n  )\n    return null\n  let closestIntersection\n  let closestRect\n\n  for (const target of targets) {\n    const intersections = rayRectIntersections(\n      ray,\n      offsetRect(target, Math.min(target.w, target.h) / 10, flow === 'horizontal' ? 'x' : 'y'),\n    )\n    if (intersections) {\n      const firstIntersection = intersections[0]\n\n      if (closestIntersection) {\n        if (pointDist(rayOrigin, firstIntersection) < pointDist(rayOrigin, closestIntersection)) {\n          closestIntersection = firstIntersection\n          closestRect = target\n        }\n      } else {\n        closestIntersection = firstIntersection\n        closestRect = target\n      }\n    }\n  }\n\n  if (closestRect) return closestRect\n\n  return null\n}\n\nexport function scaleRect(\n  rect: OverlayRect,\n  scale: number,\n  origin: {x: number; y: number},\n): OverlayRect {\n  const {x, y, w, h} = rect\n  const {x: originX, y: originY} = origin\n\n  const newX = originX + (x - originX) * scale\n  const newY = originY + (y - originY) * scale\n\n  const newWidth = w * scale\n  const newHeight = h * scale\n\n  return {\n    x: newX,\n    y: newY,\n    w: newWidth,\n    h: newHeight,\n  }\n}\n\nexport function getRectGroupXExtent(rects: OverlayRect[]): {\n  min: number\n  max: number\n  width: number\n} {\n  const minGroupX = Math.max(0, Math.min(...rects.map((r) => r.x)))\n  const maxGroupX = Math.min(document.body.offsetWidth, Math.max(...rects.map((r) => r.x + r.w)))\n\n  return {\n    min: minGroupX,\n    max: maxGroupX,\n    width: maxGroupX - minGroupX,\n  }\n}\n\nexport function getRectGroupYExtent(rects: OverlayRect[]): {\n  min: number\n  max: number\n  height: number\n} {\n  const minGroupY = Math.max(0, Math.min(...rects.map((r) => r.y)))\n  const maxGroupY = Math.min(document.body.scrollHeight, Math.max(...rects.map((r) => r.y + r.h)))\n\n  return {\n    min: minGroupY,\n    max: maxGroupY,\n    height: maxGroupY - minGroupY,\n  }\n}\n","import type {\n  DragInsertPosition,\n  DragInsertPositionRects,\n  ElementNode,\n  OverlayElement,\n  OverlayEventHandler,\n  OverlayRect,\n  Point2D,\n  SanityNode,\n} from '../types'\nimport {\n  findClosestIntersection,\n  getRect,\n  getRectGroupXExtent,\n  getRectGroupYExtent,\n  pointDist,\n  rectEqual,\n  scaleRect,\n} from './geometry'\n\nfunction calcTargetFlow(targets: OverlayRect[]) {\n  if (\n    targets.some((t1) => {\n      const others = targets.filter((t2) => !rectEqual(t1, t2))\n\n      return others.some((t2) => {\n        return t1.y === t2.y\n      })\n    })\n  ) {\n    return 'horizontal'\n  } else {\n    return 'vertical'\n  }\n}\n\nfunction calcInsertPosition(origin: Point2D, targets: OverlayRect[], flow: string) {\n  if (flow === 'horizontal') {\n    const rayLeft = {\n      x1: origin.x,\n      y1: origin.y,\n      x2: origin.x - 100_000_000,\n      y2: origin.y,\n    }\n\n    const rayRight = {\n      x1: origin.x,\n      y1: origin.y,\n      x2: origin.x + 100_000_000,\n      y2: origin.y,\n    }\n\n    return {\n      left: findClosestIntersection(rayLeft, targets, flow),\n      right: findClosestIntersection(rayRight, targets, flow),\n    }\n  } else {\n    const rayTop = {\n      x1: origin.x,\n      y1: origin.y,\n      x2: origin.x,\n      y2: origin.y - 100_000_000,\n    }\n\n    const rayBottom = {\n      x1: origin.x,\n      y1: origin.y,\n      x2: origin.x,\n      y2: origin.y + 100_000_000,\n    }\n\n    return {\n      top: findClosestIntersection(rayTop, targets, flow),\n      bottom: findClosestIntersection(rayBottom, targets, flow),\n    }\n  }\n}\n\nfunction findRectSanityData(rect: OverlayRect, overlayGroup: OverlayElement[]) {\n  return overlayGroup.find((e) => rectEqual(getRect(e.elements.element), rect))\n    ?.sanity as SanityNode\n}\n\nfunction resolveInsertPosition(\n  overlayGroup: OverlayElement[],\n  insertPosition: DragInsertPositionRects,\n  flow: string,\n): DragInsertPosition {\n  if (Object.values(insertPosition).every((v) => v === null)) return null\n\n  if (flow === 'horizontal') {\n    return {\n      left: insertPosition.left\n        ? {\n            rect: insertPosition.left,\n            sanity: findRectSanityData(insertPosition.left, overlayGroup),\n          }\n        : null,\n      right: insertPosition.right\n        ? {\n            rect: insertPosition.right,\n            sanity: findRectSanityData(insertPosition.right, overlayGroup),\n          }\n        : null,\n    }\n  } else {\n    return {\n      top: insertPosition.top\n        ? {\n            rect: insertPosition.top,\n            sanity: findRectSanityData(insertPosition.top, overlayGroup),\n          }\n        : null,\n      bottom: insertPosition.bottom\n        ? {\n            rect: insertPosition.bottom,\n            sanity: findRectSanityData(insertPosition.bottom, overlayGroup),\n          }\n        : null,\n    }\n  }\n}\n\nfunction calcMousePos(e: MouseEvent) {\n  const bodyBounds = document.body.getBoundingClientRect()\n\n  return {\n    x: Math.max(bodyBounds.x, Math.min(e.clientX, bodyBounds.x + bodyBounds.width)),\n    y: e.clientY + window.scrollY,\n  }\n}\n\nfunction calcMousePosInverseTransform(mousePos: Point2D) {\n  const body = document.body\n  const computedStyle = window.getComputedStyle(body)\n  const transform = computedStyle.transform\n\n  if (transform === 'none') {\n    return {\n      x: mousePos.x,\n      y: mousePos.y,\n    }\n  }\n\n  const matrix = new DOMMatrix(transform)\n  const inverseMatrix = matrix.inverse()\n\n  const point = new DOMPoint(mousePos.x, mousePos.y)\n  const transformedPoint = point.matrixTransform(inverseMatrix)\n\n  return {\n    x: transformedPoint.x,\n    y: transformedPoint.y,\n  }\n}\n\nfunction buildPreviewSkeleton(mousePos: Point2D, element: ElementNode, scaleFactor: number) {\n  const bounds = getRect(element)\n\n  const children = [\n    ...element.querySelectorAll(':where(h1, h2, h3, h4, p, a, img, span, button):not(:has(*))'),\n  ]\n\n  if (mousePos.x <= bounds.x) mousePos.x = bounds.x\n  if (mousePos.x >= bounds.x + bounds.w) mousePos.x = bounds.x + bounds.w\n\n  if (mousePos.y >= bounds.y + bounds.h) mousePos.y = bounds.y + bounds.h\n  if (mousePos.y <= bounds.y) mousePos.y = bounds.y\n\n  const childRects = children.map((child: Element) => {\n    // offset to account for stroke in rendered rects\n    const rect = scaleRect(getRect(child), scaleFactor, {\n      x: bounds.x,\n      y: bounds.y,\n    })\n\n    return {\n      x: rect.x - bounds.x,\n      y: rect.y - bounds.y,\n      w: rect.w,\n      h: rect.h,\n      tagName: child.tagName,\n    }\n  })\n\n  return {\n    offsetX: (bounds.x - mousePos.x) * scaleFactor,\n    offsetY: (bounds.y - mousePos.y) * scaleFactor,\n    w: bounds.w * scaleFactor,\n    h: bounds.h * scaleFactor,\n    maxWidth: bounds.w * scaleFactor * 0.75,\n    childRects,\n  }\n}\n\nconst minDragDelta = 4\n\nasync function applyMinimapWrapperTransform(\n  target: HTMLElement,\n  scaleFactor: number,\n  minYScaled: number,\n  handler: OverlayEventHandler,\n  rectUpdateFrequency: number,\n): Promise<void> {\n  return new Promise((resolve) => {\n    target.addEventListener(\n      'transitionend',\n      () => {\n        setTimeout(() => {\n          handler({\n            type: 'overlay/dragEndMinimapTransition',\n          })\n        }, rectUpdateFrequency * 2)\n\n        resolve()\n      },\n      {once: true},\n    )\n\n    handler({\n      type: 'overlay/dragStartMinimapTransition',\n    })\n\n    handler({\n      type: 'overlay/dragToggleMinimap',\n      display: true,\n    })\n\n    document.body.style.overflow = 'hidden'\n    document.body.style.height = '100%'\n    document.documentElement.style.overflow = 'initial'\n    document.documentElement.style.height = '100%'\n\n    // ensure overflow hidden has applied and scrolling stopped before applying transform, prevent minor y-position transform issues\n    setTimeout(() => {\n      target.style.transformOrigin = '50% 0px'\n      target.style.transition = 'transform 150ms ease'\n      target.style.transform = `translate3d(0px, ${-minYScaled + scrollY}px, 0px) scale(${scaleFactor})`\n    }, 25)\n  })\n}\n\nfunction calcMinimapTransformValues(rects: OverlayRect[], groupHeightOverride: number | null) {\n  let groupHeight = groupHeightOverride || getRectGroupYExtent(rects).height\n\n  const padding = 100 // px\n\n  groupHeight += padding * 2\n\n  const scaleFactor = groupHeight > window.innerHeight ? window.innerHeight / groupHeight : 1\n  const scaledRects = rects.map((r) => scaleRect(r, scaleFactor, {x: window.innerWidth / 2, y: 0}))\n\n  const {min: minYScaled} = getRectGroupYExtent(scaledRects)\n\n  return {\n    scaleFactor,\n    minYScaled: minYScaled - padding * scaleFactor,\n  }\n}\nfunction calcGroupBoundsPreview(rects: OverlayRect[]) {\n  const groupBoundsX = getRectGroupXExtent(rects)\n  const groupBoundsY = getRectGroupYExtent(rects)\n\n  const offsetDist = 8\n\n  const canOffsetX =\n    groupBoundsX.min > offsetDist &&\n    groupBoundsX.min + groupBoundsX.width <= window.innerWidth - offsetDist\n  const canOffsetY =\n    groupBoundsY.min > offsetDist &&\n    groupBoundsY.min + groupBoundsY.height <= document.body.scrollHeight - offsetDist\n  const canOffset = canOffsetX && canOffsetY\n\n  const groupRect = {\n    x: canOffset ? groupBoundsX.min - offsetDist : groupBoundsX.min,\n    y: canOffset ? groupBoundsY.min - offsetDist : groupBoundsY.min,\n    w: canOffset ? groupBoundsX.width + offsetDist * 2 : groupBoundsX.width,\n    h: canOffset ? groupBoundsY.height + offsetDist * 2 : groupBoundsY.height,\n  }\n\n  return groupRect\n}\n\nasync function resetMinimapWrapperTransform(\n  endYOrigin: number,\n  target: HTMLElement,\n  prescaleHeight: number,\n  handler: OverlayEventHandler,\n  rectUpdateFrequency: number,\n  previousRootStyleValues: PreviousRootStyleValues | null,\n): Promise<void> {\n  return new Promise((resolve) => {\n    const computedStyle = window.getComputedStyle(target)\n    const transform = computedStyle.transform\n\n    const matrix = new DOMMatrix(transform)\n\n    const scale = matrix.a\n\n    if (scale === 1) return\n\n    const maxScroll = prescaleHeight - window.innerHeight\n    const prevScrollY = scrollY\n\n    endYOrigin -= window.innerHeight / 2\n\n    if (endYOrigin < 0) endYOrigin = 0\n\n    target.addEventListener(\n      'transitionend',\n      () => {\n        target.style.transition = `none`\n        target.style.transform = `none`\n\n        scrollTo({\n          top: endYOrigin,\n          behavior: 'instant',\n        })\n\n        setTimeout(() => {\n          handler({\n            type: 'overlay/dragEndMinimapTransition',\n          })\n\n          handler({\n            type: 'overlay/dragToggleMinimap',\n            display: false,\n          })\n        }, rectUpdateFrequency * 2)\n\n        resolve()\n      },\n      {once: true},\n    )\n\n    handler({\n      type: 'overlay/dragStartMinimapTransition',\n    })\n\n    target.style.transform = `translateY(${Math.max(prevScrollY - endYOrigin, -maxScroll + prevScrollY)}px) scale(${1})`\n\n    if (!previousRootStyleValues) return\n\n    document.body.style.overflow = previousRootStyleValues.body.overflow\n    document.body.style.height = previousRootStyleValues.body.height\n    document.documentElement.style.overflow = previousRootStyleValues.documentElement.overflow\n    document.documentElement.style.height = previousRootStyleValues.documentElement.height\n  })\n}\n\ninterface PreviousRootStyleValues {\n  body: {\n    overflow: string\n    height: string\n  }\n  documentElement: {\n    overflow: string\n    height: string\n  }\n}\n\ninterface HandleOverlayDragOpts {\n  mouseEvent: MouseEvent\n  element: ElementNode\n  overlayGroup: OverlayElement[]\n  handler: OverlayEventHandler\n  target: SanityNode\n  onSequenceStart: () => void\n  onSequenceEnd: () => void\n}\n\nlet minimapScaleApplied = false\n\nlet mousePosInverseTransform = {x: 0, y: 0}\nlet mousePos = {x: 0, y: 0}\n\nlet prescaleHeight = typeof document === 'undefined' ? 0 : document.documentElement.scrollHeight\n\nlet previousRootStyleValues: PreviousRootStyleValues | null = null\n\nexport function handleOverlayDrag(opts: HandleOverlayDragOpts): void {\n  const {mouseEvent, element, overlayGroup, handler, target, onSequenceStart, onSequenceEnd} = opts\n\n  // do not trigger drag sequence on anything other than \"main\" (0) click, ignore right click, etc\n  if (mouseEvent.button !== 0) return\n\n  // ensure keyboard events fire within frame context\n  window.focus()\n\n  const rectUpdateFrequency = 150\n  let rects = overlayGroup.map((e) => getRect(e.elements.element))\n\n  const flow = (element.getAttribute('data-sanity-drag-flow') || calcTargetFlow(rects)) as\n    | 'horizontal'\n    | 'vertical'\n\n  const dragGroup = element.getAttribute('data-sanity-drag-group')\n\n  const disableMinimap = !!element.getAttribute('data-sanity-drag-minimap-disable')\n\n  const preventInsertDefault = !!element.getAttribute('data-sanity-drag-prevent-default')\n\n  const documentHeightOverride = element.getAttribute('data-unstable_sanity-drag-document-height')\n  const groupHeightOverride = element.getAttribute('data-unstable_sanity-drag-group-height')\n\n  let insertPosition: DragInsertPositionRects | null = null\n\n  const initialMousePos = calcMousePos(mouseEvent)\n\n  const scaleTarget = document.body\n\n  const {minYScaled, scaleFactor} = calcMinimapTransformValues(\n    rects,\n    groupHeightOverride ? ~~groupHeightOverride : null,\n  )\n\n  let sequenceStarted = false\n  let minimapPromptShown = false\n\n  let mousedown = true\n\n  if (!minimapScaleApplied) {\n    previousRootStyleValues = {\n      body: {\n        overflow: window.getComputedStyle(document.body).overflow,\n        height: window.getComputedStyle(document.body).height,\n      },\n      documentElement: {\n        overflow: window.getComputedStyle(document.documentElement).overflow,\n        height: window.getComputedStyle(document.documentElement).height,\n      },\n    }\n\n    prescaleHeight = documentHeightOverride\n      ? ~~documentHeightOverride\n      : document.documentElement.scrollHeight\n  }\n\n  const rectsInterval = setInterval(() => {\n    rects = overlayGroup.map((e) => getRect(e.elements.element))\n  }, rectUpdateFrequency)\n\n  const applyMinimap = (): void => {\n    if (scaleFactor >= 1) return\n\n    const skeleton = buildPreviewSkeleton(mousePos, element, scaleFactor)\n\n    handler({\n      type: 'overlay/dragUpdateSkeleton',\n      skeleton,\n    })\n\n    handler({\n      type: 'overlay/dragToggleMinimapPrompt',\n      display: false,\n    })\n\n    applyMinimapWrapperTransform(\n      scaleTarget,\n      scaleFactor,\n      minYScaled,\n      handler,\n      rectUpdateFrequency,\n    ).then(() => {\n      setTimeout(() => {\n        handler({\n          type: 'overlay/dragUpdateGroupRect',\n          groupRect: calcGroupBoundsPreview(rects),\n        })\n      }, rectUpdateFrequency * 2)\n    })\n  }\n\n  const handleScroll = (e: WheelEvent) => {\n    if (\n      Math.abs(e.deltaY) >= 10 &&\n      scaleFactor < 1 &&\n      !minimapScaleApplied &&\n      !minimapPromptShown &&\n      !disableMinimap &&\n      mousedown\n    ) {\n      handler({\n        type: 'overlay/dragToggleMinimapPrompt',\n        display: true,\n      })\n\n      minimapPromptShown = true\n    }\n\n    if (e.shiftKey && !minimapScaleApplied && !disableMinimap) {\n      window.dispatchEvent(new CustomEvent('unstable_sanity/dragApplyMinimap'))\n\n      minimapScaleApplied = true\n\n      setTimeout(() => {\n        applyMinimap()\n      }, 50)\n    }\n  }\n\n  const handleMouseMove = (e: MouseEvent): void => {\n    e.preventDefault()\n\n    mousePos = calcMousePos(e)\n    mousePosInverseTransform = calcMousePosInverseTransform(mousePos)\n\n    if (Math.abs(pointDist(mousePos, initialMousePos)) < minDragDelta) return\n\n    if (!sequenceStarted) {\n      const groupRect = calcGroupBoundsPreview(rects)\n\n      const skeleton = buildPreviewSkeleton(mousePos, element, 1)\n\n      handler({\n        type: 'overlay/dragStart',\n        flow,\n      })\n\n      handler({\n        type: 'overlay/dragUpdateSkeleton',\n        skeleton,\n      })\n\n      handler({\n        type: 'overlay/dragUpdateGroupRect',\n        groupRect,\n      })\n\n      sequenceStarted = true\n      onSequenceStart()\n    }\n\n    handler({\n      type: 'overlay/dragUpdateCursorPosition',\n      x: mousePos.x,\n      y: mousePos.y,\n    })\n\n    if (e.shiftKey && !minimapScaleApplied && !disableMinimap) {\n      window.dispatchEvent(new CustomEvent('unstable_sanity/dragApplyMinimap'))\n\n      minimapScaleApplied = true\n\n      setTimeout(() => {\n        applyMinimap()\n      }, 50)\n    }\n\n    const newInsertPosition = calcInsertPosition(mousePos, rects, flow)\n\n    if (JSON.stringify(insertPosition) !== JSON.stringify(newInsertPosition)) {\n      insertPosition = newInsertPosition\n\n      handler({\n        type: 'overlay/dragUpdateInsertPosition',\n        insertPosition: resolveInsertPosition(overlayGroup, insertPosition, flow),\n      })\n    }\n  }\n\n  const handleMouseUp = (): void => {\n    mousedown = false\n\n    handler({\n      type: 'overlay/dragEnd',\n      target,\n      insertPosition: insertPosition\n        ? resolveInsertPosition(overlayGroup, insertPosition, flow)\n        : null,\n      dragGroup,\n      flow,\n      preventInsertDefault,\n    })\n\n    if (minimapPromptShown) {\n      handler({\n        type: 'overlay/dragToggleMinimapPrompt',\n        display: false,\n      })\n    }\n\n    if (!minimapScaleApplied) {\n      clearInterval(rectsInterval)\n      onSequenceEnd()\n\n      removeFrameListeners()\n      removeKeyListeners()\n    }\n\n    removeMouseListeners()\n  }\n\n  const handleKeyup = (e: KeyboardEvent) => {\n    if (e.key === 'Shift' && minimapScaleApplied) {\n      minimapScaleApplied = false\n\n      const skeleton = buildPreviewSkeleton(mousePos, element, 1 / scaleFactor)\n\n      handler({\n        type: 'overlay/dragUpdateSkeleton',\n        skeleton,\n      })\n\n      window.dispatchEvent(new CustomEvent('unstable_sanity/dragResetMinimap'))\n\n      setTimeout(() => {\n        resetMinimapWrapperTransform(\n          mousePosInverseTransform.y,\n          scaleTarget,\n          prescaleHeight,\n          handler,\n          rectUpdateFrequency,\n          previousRootStyleValues,\n        )\n      }, 50)\n\n      handler({\n        type: 'overlay/dragUpdateGroupRect',\n        groupRect: null,\n      })\n\n      // cleanup keyup after drag sequence is complete\n      if (!mousedown) {\n        clearInterval(rectsInterval)\n\n        removeMouseListeners()\n        removeFrameListeners()\n        removeKeyListeners()\n\n        onSequenceEnd()\n      }\n    }\n  }\n\n  const handleBlur = () => {\n    handler({\n      type: 'overlay/dragUpdateGroupRect',\n      groupRect: null,\n    })\n\n    window.dispatchEvent(new CustomEvent('unstable_sanity/dragResetMinimap'))\n\n    setTimeout(() => {\n      resetMinimapWrapperTransform(\n        mousePosInverseTransform.y,\n        scaleTarget,\n        prescaleHeight,\n        handler,\n        rectUpdateFrequency,\n        previousRootStyleValues,\n      ).then(() => {\n        minimapScaleApplied = false\n      })\n    }, 50)\n\n    clearInterval(rectsInterval)\n\n    removeMouseListeners()\n    removeFrameListeners()\n    removeKeyListeners()\n\n    onSequenceEnd()\n  }\n\n  const removeMouseListeners = () => {\n    window.removeEventListener('mousemove', handleMouseMove)\n    window.removeEventListener('wheel', handleScroll)\n    window.removeEventListener('mouseup', handleMouseUp)\n  }\n\n  const removeKeyListeners = () => {\n    window.removeEventListener('keyup', handleKeyup)\n  }\n\n  const removeFrameListeners = () => {\n    window.removeEventListener('blur', handleBlur)\n  }\n\n  window.addEventListener('blur', handleBlur)\n  window.addEventListener('keyup', handleKeyup)\n  window.addEventListener('wheel', handleScroll)\n  window.addEventListener('mousemove', handleMouseMove)\n  window.addEventListener('mouseup', handleMouseUp)\n}\n","import type {ElementNode} from '../types'\n\nexport const isElementNode = (target: EventTarget | null): target is ElementNode => {\n  return target instanceof HTMLElement || target instanceof SVGElement\n}\n\nexport function findNonInlineElement(element: ElementNode): ElementNode | null {\n  const {display} = window.getComputedStyle(element)\n\n  if (display !== 'inline') return element\n\n  const parent = element.parentElement\n\n  if (!parent) return null\n\n  return findNonInlineElement(parent)\n}\n\nexport const findOverlayElement = (\n  el: EventTarget | ElementNode | null | undefined,\n): ElementNode | null => {\n  if (!el || !isElementNode(el)) {\n    return null\n  }\n\n  if (el.dataset?.['sanityOverlayElement']) {\n    return el\n  }\n\n  return findOverlayElement(el.parentElement)\n}\n","import type {SanityStegaNode} from '@sanity/presentation-comlink'\nimport {vercelStegaDecode} from '@vercel/stega'\nimport {VERCEL_STEGA_REGEX} from '../constants'\n\n/**\n * JavaScript regexps are stateful. Have to reset lastIndex between runs to ensure consistent behaviour for the same string\n * @param input\n */\nfunction testVercelStegaRegex(input: string): boolean {\n  VERCEL_STEGA_REGEX.lastIndex = 0\n  return VERCEL_STEGA_REGEX.test(input)\n}\n\nfunction decodeStega(str: string, isAltText = false): SanityStegaNode | null {\n  try {\n    const decoded = vercelStegaDecode<SanityStegaNode>(str)\n    if (!decoded || decoded.origin !== 'sanity.io') {\n      return null\n    }\n    if (isAltText) {\n      decoded.href = decoded.href?.replace('.alt', '')\n    }\n    return decoded\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('Failed to decode stega for string: ', str, 'with the original error: ', err)\n    return null\n  }\n}\n\nexport function testAndDecodeStega(str: string, isAltText = false): SanityStegaNode | null {\n  if (testVercelStegaRegex(str)) {\n    return decodeStega(str, isAltText)\n  }\n  return null\n}\n","import {decodeSanityNodeData} from '@sanity/visual-editing-csm'\nimport type {\n  ElementNode,\n  OverlayElement,\n  ResolvedElement,\n  SanityNode,\n  SanityStegaNode,\n} from '../types'\nimport {findNonInlineElement} from './elements'\nimport {testAndDecodeStega} from './stega'\n\nconst isElementNode = (node: ChildNode): node is ElementNode => node.nodeType === Node.ELEMENT_NODE\n\nconst isImgElement = (el: ElementNode): el is HTMLImageElement => el.tagName === 'IMG'\n\nconst isTimeElement = (el: ElementNode): el is HTMLTimeElement => el.tagName === 'TIME'\n\nconst isSvgRootElement = (el: ElementNode): el is SVGSVGElement =>\n  el.tagName.toUpperCase() === 'SVG'\n\nexport function isSanityNode(node: SanityNode | SanityStegaNode): node is SanityNode {\n  return 'path' in node\n}\n\n/**\n * Finds commonality between two document paths strings\n * @param first First path to compare\n * @param second Second path to compare\n * @returns A common path\n */\nexport function findCommonPath(first: string, second: string): string {\n  let firstParts = first.split('.')\n  let secondParts = second.split('.')\n  const maxLength = Math.min(firstParts.length, secondParts.length)\n  firstParts = firstParts.slice(0, maxLength).reverse()\n  secondParts = secondParts.slice(0, maxLength).reverse()\n\n  return firstParts\n    .reduce((parts, part, i) => (part === secondParts[i] ? [...parts, part] : []), [] as string[])\n    .reverse()\n    .join('.')\n}\n\n/**\n * Returns common Sanity node data from multiple nodes\n * If document paths are present, tries to resolve a common path\n * @param nodes An array of Sanity nodes\n * @returns A single sanity node or undefined\n * @internal\n */\nexport function findCommonSanityData(\n  nodes: (SanityNode | SanityStegaNode)[],\n): SanityNode | SanityStegaNode | undefined {\n  // If there are no nodes, or inconsistent node types\n  if (!nodes.length || !nodes.map((n) => isSanityNode(n)).every((n, _i, arr) => n === arr[0])) {\n    return undefined\n  }\n  // If legacy nodes, return first match (no common pathfinding)\n  if (!isSanityNode(nodes[0])) return nodes[0]\n\n  const sanityNodes = nodes.filter(isSanityNode)\n  let common: SanityNode | undefined = nodes[0]\n\n  const consistentValueKeys: Array<keyof SanityNode> = [\n    'projectId',\n    'dataset',\n    'id',\n    'baseUrl',\n    'workspace',\n    'tool',\n  ]\n  for (let i = 1; i < sanityNodes.length; i++) {\n    const node = sanityNodes[i]\n    if (consistentValueKeys.some((key) => node[key] !== common?.[key])) {\n      common = undefined\n      break\n    }\n\n    common.path = findCommonPath(common.path, node.path)\n  }\n\n  return common\n}\n\n/**\n * Finds nodes containing sanity specific data\n * @param el - A parent element to traverse\n * @returns An array of objects, each containing an HTML element and decoded sanity data\n * @internal\n */\nexport function findSanityNodes(\n  el: ElementNode | ChildNode | {childNodes: Array<ElementNode>},\n): ResolvedElement[] {\n  const elements: ResolvedElement[] = []\n\n  function addElement(element: ElementNode, data: SanityStegaNode | string) {\n    const sanity = decodeSanityNodeData(data)\n    if (!sanity) {\n      return\n    }\n\n    // resize observer does not fire for non-replaced inline elements https://drafts.csswg.org/resize-observer/#intro\n    const measureElement = findNonInlineElement(element)\n    if (!measureElement) {\n      return\n    }\n\n    elements.push({\n      elements: {\n        element,\n        measureElement,\n      },\n      sanity,\n    })\n  }\n\n  if (el) {\n    for (const node of el.childNodes) {\n      const {nodeType, parentElement, textContent} = node\n      // If an edit target is found, find common paths\n      if (isElementNode(node) && node.dataset?.['sanityEditTarget'] !== undefined) {\n        const nodesInTarget = findSanityNodes(node).map(({sanity}) => sanity)\n        // If there are inconsistent node types, continue\n        if (!nodesInTarget.map((n) => isSanityNode(n)).every((n, _i, arr) => n === arr[0])) {\n          continue\n        }\n\n        const commonData = findCommonSanityData(nodesInTarget)\n\n        if (commonData) {\n          elements.push({\n            elements: {\n              element: node,\n              measureElement: node,\n            },\n            sanity: commonData,\n          })\n        }\n\n        // Check non-empty, child-only text nodes for stega strings\n      } else if (nodeType === Node.TEXT_NODE && parentElement && textContent) {\n        const data = testAndDecodeStega(textContent)\n        if (!data) continue\n        addElement(parentElement, data)\n      }\n      // Check element nodes for data attributes, alt tags, etc\n      else if (isElementNode(node)) {\n        // Do not traverse script tags\n        // Do not traverse the visual editing overlay\n        if (node.tagName === 'SCRIPT' || node.tagName === 'SANITY-VISUAL-EDITING') {\n          continue\n        }\n\n        // Prefer elements with explicit data attributes\n        if (node.dataset?.['sanity']) {\n          addElement(node, node.dataset['sanity'])\n        }\n        // Look for legacy sanity data attributes\n        else if (node.dataset?.['sanityEditInfo']) {\n          addElement(node, node.dataset['sanityEditInfo'])\n        } else if (isImgElement(node)) {\n          const data = testAndDecodeStega(node.alt, true)\n          if (!data) continue\n          addElement(node, data)\n          // No need to recurse for img elements\n          continue\n        } else if (isTimeElement(node)) {\n          const data = testAndDecodeStega(node.dateTime, true)\n          if (!data) continue\n          addElement(node, data)\n        } else if (isSvgRootElement(node)) {\n          if (!node.ariaLabel) continue\n          const data = testAndDecodeStega(node.ariaLabel, true)\n          if (!data) continue\n          addElement(node, data)\n        }\n\n        elements.push(...findSanityNodes(node))\n      }\n    }\n  }\n  return elements\n}\n\nexport function isSanityArrayPath(path: string): boolean {\n  const lastDotIndex = path.lastIndexOf('.')\n  const lastPathItem = path.substring(lastDotIndex, path.length)\n\n  return lastPathItem.includes('[')\n}\n\nexport function getSanityNodeArrayPath(path: string): string | null {\n  if (!isSanityArrayPath(path)) return null\n\n  const split = path.split('.')\n\n  split[split.length - 1] = split[split.length - 1].replace(/\\[.*?\\]/g, '[]')\n\n  return split.join('.')\n}\n\nexport function sanityNodesExistInSameArray(\n  sanityNode1: SanityNode,\n  sanityNode2: SanityNode,\n): boolean {\n  if (!isSanityArrayPath(sanityNode1.path) || !isSanityArrayPath(sanityNode2.path)) return false\n\n  return getSanityNodeArrayPath(sanityNode1.path) === getSanityNodeArrayPath(sanityNode2.path)\n}\n\nexport function resolveDragAndDropGroup(\n  element: ElementNode,\n  sanity: SanityNode | SanityStegaNode,\n  elementSet: Set<ElementNode>,\n  elementsMap: WeakMap<ElementNode, OverlayElement>,\n): null | OverlayElement[] {\n  if (!element.getAttribute('data-sanity')) return null\n\n  if (element.getAttribute('data-sanity-drag-disable')) return null\n\n  if (!sanity || !isSanityNode(sanity) || !isSanityArrayPath(sanity.path)) return null\n\n  const targetDragGroup = element.getAttribute('data-sanity-drag-group')\n\n  const group = [...elementSet].reduce<OverlayElement[]>((acc, el) => {\n    const elData = elementsMap.get(el)\n    const elDragDisabled = el.getAttribute('data-sanity-drag-disable')\n    const elDragGroup = el.getAttribute('data-sanity-drag-group')\n    const elHasSanityAttribution = el.getAttribute('data-sanity') !== null\n\n    const sharedDragGroup = targetDragGroup !== null ? targetDragGroup === elDragGroup : true\n\n    if (\n      elData &&\n      !elDragDisabled &&\n      isSanityNode(elData.sanity) &&\n      sanityNodesExistInSameArray(sanity, elData.sanity) &&\n      sharedDragGroup &&\n      elHasSanityAttribution\n    ) {\n      acc.push(elData)\n    }\n\n    return acc\n  }, [])\n\n  if (group.length <= 1) return null\n\n  return group\n}\n","import {v4 as uuid} from 'uuid'\nimport type {\n  ElementNode,\n  EventHandlers,\n  OverlayController,\n  OverlayElement,\n  OverlayOptions,\n  ResolvedElement,\n} from './types'\nimport {handleOverlayDrag} from './util/dragAndDrop'\nimport {findOverlayElement, isElementNode} from './util/elements'\nimport {\n  findSanityNodes,\n  isSanityArrayPath,\n  isSanityNode,\n  resolveDragAndDropGroup,\n} from './util/findSanityNodes'\nimport {getRect} from './util/geometry'\n\n/**\n * Creates a controller which dispatches overlay related events\n *\n * @param handler - Dispatched event handler\n * @param overlayElement - Parent element containing rendered overlay elements\n * @public\n */\nexport function createOverlayController({\n  handler,\n  overlayElement,\n  inFrame,\n  inPopUp,\n  optimisticActorReady,\n}: OverlayOptions): OverlayController {\n  let activated = false\n  // Map for getting element by ID\n  const elementIdMap = new Map<string, ElementNode>()\n  // WeakMap for getting data by element\n  const elementsMap = new WeakMap<ElementNode, OverlayElement>()\n  // Set for iterating over elements\n  const elementSet = new Set<ElementNode>()\n  // Weakmap keyed by measureElement to find associated element\n  const measureElements = new WeakMap<ElementNode, ElementNode>()\n  // Weakmap for storing user set cursor styles per element\n  const cursorMap = new WeakMap<ElementNode, string | undefined>()\n\n  let ro: ResizeObserver\n  let io: IntersectionObserver | undefined\n  let mo: MutationObserver\n\n  let activeDragSequence = false\n\n  // The `hoverStack` is used as a container for tracking which elements are hovered at any time.\n  // The browser supports hovering multiple nested elements simultanously, but we only want to\n  // highlight the \"outer most\" element.\n  //\n  // This is how it works:\n  // - Whenever the mouse enters an element, we add it to the stack.\n  // - Whenever the mouse leaves an element, we remove it from the stack.\n  //\n  // When we want to know which element is currently hovered, we take the element at the top of the\n  // stack. Since JavaScript does not have a Stack type, we use an array and take the last element.\n  let hoverStack: Array<ElementNode> = []\n  const getHoveredElement = () => hoverStack[hoverStack.length - 1] as ElementNode | undefined\n\n  function addEventHandlers(el: ElementNode, handlers: EventHandlers) {\n    el.addEventListener('click', handlers.click as EventListener, {\n      capture: true,\n    })\n    el.addEventListener('contextmenu', handlers.contextmenu as EventListener, {\n      capture: true,\n    })\n    // We listen for the initial mousemove event, in case the overlay is enabled whilst the cursor is already over an element\n    // mouseenter and mouseleave listeners are attached within this handler\n    el.addEventListener('mousemove', handlers.mousemove as EventListener, {\n      once: true,\n      capture: true,\n    })\n    // Listen for mousedown in case we need to prevent default behavior\n    el.addEventListener('mousedown', handlers.mousedown as EventListener, {\n      capture: true,\n    })\n  }\n\n  function removeEventHandlers(el: ElementNode, handlers: EventHandlers) {\n    el.removeEventListener('click', handlers.click as EventListener, {\n      capture: true,\n    })\n    el.removeEventListener('contextmenu', handlers.contextmenu as EventListener, {\n      capture: true,\n    })\n    el.removeEventListener('mousemove', handlers.mousemove as EventListener, {\n      capture: true,\n    })\n    el.removeEventListener('mousedown', handlers.mousedown as EventListener, {\n      capture: true,\n    })\n    el.removeEventListener('mouseenter', handlers.mouseenter as EventListener)\n    el.removeEventListener('mouseleave', handlers.mouseleave as EventListener)\n  }\n\n  /**\n   * Executed when element enters the viewport\n   * Enables an element’s event handlers\n   */\n  function activateElement({id, elements, handlers}: OverlayElement) {\n    const {element, measureElement} = elements\n    addEventHandlers(element, handlers)\n    ro.observe(measureElement)\n    handler({\n      type: 'element/activate',\n      id,\n    })\n  }\n\n  /**\n   * Executed when element leaves the viewport\n   * Disables an element’s event handlers\n   */\n  function deactivateElement({id, elements, handlers}: OverlayElement) {\n    const {element, measureElement} = elements\n    removeEventHandlers(element, handlers)\n    ro.unobserve(measureElement)\n    // Scrolling from a hovered element will not trigger mouseleave event, so filter the stack\n    hoverStack = hoverStack.filter((el) => el !== element)\n    handler({\n      type: 'element/deactivate',\n      id,\n    })\n  }\n\n  function setOverlayCursor(element: ElementNode) {\n    // Don't set the cursor if mutations are unavailable\n    if ((!inFrame && !inPopUp) || !optimisticActorReady) return\n\n    // Loops through the entire hoverStack, trying to set the cursor if the\n    // stack element matches the element passed to the function, otherwise\n    // restoring the cursor\n    for (const hoverstackElement of hoverStack) {\n      if (element === hoverstackElement) {\n        const targetSanityData = elementsMap.get(element)?.sanity\n        if (!targetSanityData || !isSanityNode(targetSanityData)) return\n\n        const dragGroup = resolveDragAndDropGroup(\n          element,\n          targetSanityData,\n          elementSet,\n          elementsMap,\n        )\n\n        if (dragGroup) {\n          // Store any existing cursor so it can be restored later\n          const existingCursor = element.style.cursor\n          if (existingCursor) {\n            cursorMap.set(element, existingCursor)\n          }\n\n          handler({\n            type: 'overlay/setCursor',\n            element,\n            cursor: 'move',\n          })\n\n          continue\n        }\n      }\n\n      restoreOverlayCursor(hoverstackElement)\n    }\n  }\n\n  function restoreOverlayCursor(element: ElementNode) {\n    // Restore any previously stored cursor (if it exists)\n    const previousCursor = cursorMap.get(element)\n\n    handler({\n      type: 'overlay/setCursor',\n      element,\n      cursor: previousCursor,\n    })\n  }\n\n  /**\n   * Stores an element’s DOM node and decoded sanity data in state and sets up event handlers\n   */\n  function registerElement({elements, sanity}: ResolvedElement) {\n    const {element, measureElement} = elements\n\n    const eventHandlers: EventHandlers = {\n      click(event) {\n        const target = event.target as ElementNode | null\n\n        if (element === getHoveredElement() && element.contains(target)) {\n          // Click events are only supported supported in iframes, not well supported in popups\n          // @TODO presentation tool should report wether it's visible or not, so we can adapt properly and allow multi-window preview workflows\n          if (inFrame) {\n            event.preventDefault()\n            event.stopPropagation()\n          }\n\n          const sanity = elementsMap.get(element)?.sanity\n          if (sanity && !activeDragSequence) {\n            handler({\n              type: 'element/click',\n              id,\n              sanity,\n            })\n          }\n        }\n      },\n      contextmenu(event) {\n        if (!('path' in sanity) || (!inFrame && !inPopUp) || !optimisticActorReady) return\n\n        // This is a temporary check as the context menu only supports array\n        // items (for now). We split the path into segments, if a `_key` exists\n        // in last path segment, we assume it's an array item, and so return\n        // early if it is some other type.\n        if (!sanity.path.split('.').pop()?.includes('[_key==')) return\n\n        const target = event.target as ElementNode | null\n        if (element === getHoveredElement() && element.contains(target)) {\n          // Context menus are supported on both iframes and popups\n          if (inFrame || inPopUp) {\n            event.preventDefault()\n            event.stopPropagation()\n          }\n          handler({\n            type: 'element/contextmenu',\n            id,\n            position: {\n              x: event.clientX,\n              y: event.clientY,\n            },\n            sanity,\n          })\n        }\n      },\n      mousedown(event) {\n        // prevent iframe from taking focus\n        event.preventDefault()\n\n        if (event.currentTarget !== hoverStack.at(-1)) return\n\n        if (element.getAttribute('data-sanity-drag-disable')) return\n\n        // disable dnd in non-studio contexts\n        if ((!inFrame && !inPopUp) || !optimisticActorReady) return\n\n        const targetSanityData = elementsMap.get(element)?.sanity\n\n        if (\n          !targetSanityData ||\n          !isSanityNode(targetSanityData) ||\n          !isSanityArrayPath(targetSanityData.path)\n        )\n          return\n\n        const dragGroup = resolveDragAndDropGroup(element, sanity, elementSet, elementsMap)\n\n        if (!dragGroup) return\n\n        handleOverlayDrag({\n          element,\n          handler,\n          mouseEvent: event as MouseEvent,\n          overlayGroup: dragGroup,\n          target: targetSanityData,\n          onSequenceStart: () => {\n            activeDragSequence = true\n          },\n          onSequenceEnd: () => {\n            // delay drag sequence end to prevent click events from firing just after drag sequences\n            setTimeout(() => {\n              activeDragSequence = false\n            }, 250)\n          },\n        })\n      },\n      mousemove(event) {\n        eventHandlers.mouseenter(event)\n        const el = event.currentTarget as ElementNode | null\n        if (el) {\n          el.addEventListener('mouseenter', eventHandlers.mouseenter as EventListener)\n          el.addEventListener('mouseleave', eventHandlers.mouseleave as EventListener)\n        }\n      },\n      mouseenter() {\n        // If the Vercel Visual Editing provided by Vercel Toolbar is active, do not overlap overlays\n        if (\n          (document.querySelector('vercel-live-feedback') &&\n            element.closest('[data-vercel-edit-info]')) ||\n          element.closest('[data-vercel-edit-target]')\n        ) {\n          return\n        }\n        hoverStack.push(element)\n\n        handler({\n          type: 'element/mouseenter',\n          id,\n          rect: getRect(element),\n        })\n\n        setOverlayCursor(element)\n      },\n      mouseleave(e) {\n        function leave() {\n          hoverStack.pop()\n          const hoveredElement = getHoveredElement()\n\n          handler({\n            type: 'element/mouseleave',\n            id,\n          })\n\n          if (hoveredElement) {\n            setOverlayCursor(hoveredElement)\n            const overlayElement = elementsMap.get(hoveredElement)\n            if (overlayElement) {\n              handler({\n                type: 'element/mouseenter',\n                id: overlayElement.id,\n                rect: getRect(hoveredElement),\n              })\n            }\n          }\n\n          restoreOverlayCursor(element)\n        }\n\n        /**\n         * If moving to an element within the overlay which handles pointer events, attach a new\n         * event handler to that element and defer the original leave event\n         */\n        function addDeferredLeave(el: ElementNode) {\n          const deferredLeave = (e: MouseEvent) => {\n            const {relatedTarget} = e\n            const deferredContainer = findOverlayElement(relatedTarget)\n            if (!deferredContainer) {\n              el.removeEventListener('mouseleave', deferredLeave as EventListener)\n              leave()\n            } else if (relatedTarget && isElementNode(relatedTarget)) {\n              el.removeEventListener('mouseleave', deferredLeave as EventListener)\n              addDeferredLeave(relatedTarget)\n            }\n          }\n          el.addEventListener('mouseleave', deferredLeave as EventListener)\n        }\n\n        const {relatedTarget} = e as MouseEvent\n        const container = findOverlayElement(relatedTarget)\n        const isInteractiveOverlayElement = overlayElement.contains(container)\n\n        if (isElementNode(container) && isInteractiveOverlayElement) {\n          return addDeferredLeave(container)\n        }\n\n        leave()\n      },\n    }\n\n    const id = uuid()\n    const sanityNode = {\n      id,\n      elements,\n      sanity,\n      handlers: eventHandlers,\n    }\n    elementSet.add(element)\n    measureElements.set(measureElement, element)\n    elementIdMap.set(id, element)\n    elementsMap.set(element, sanityNode)\n\n    io?.observe(element)\n\n    handler({\n      type: 'element/register',\n      id,\n      element,\n      rect: getRect(element),\n      sanity,\n      dragDisabled: !!element.getAttribute('data-sanity-drag-disable'),\n    })\n\n    if (activated) {\n      activateElement(sanityNode)\n    }\n  }\n\n  function updateElement({elements, sanity}: ResolvedElement) {\n    const {element} = elements\n    const overlayElement = elementsMap.get(element)\n    if (overlayElement) {\n      elementsMap.set(element, {...overlayElement, sanity})\n      handler({\n        type: 'element/update',\n        id: overlayElement.id,\n        rect: getRect(element),\n        sanity: sanity,\n      })\n    }\n  }\n\n  function parseElements(node: ElementNode | {childNodes: ElementNode[]}) {\n    const sanityNodes = findSanityNodes(node)\n    for (const sanityNode of sanityNodes) {\n      const {element} = sanityNode.elements\n      if (elementsMap.has(element)) {\n        updateElement(sanityNode)\n      } else {\n        registerElement(sanityNode)\n      }\n    }\n  }\n\n  function unregisterElement(element: ElementNode) {\n    const overlayElement = elementsMap.get(element)\n    if (overlayElement) {\n      const {id, handlers} = overlayElement\n      removeEventHandlers(element, handlers)\n      ro.unobserve(element)\n      elementsMap.delete(element)\n      elementSet.delete(element)\n      elementIdMap.delete(id)\n      handler({\n        type: 'element/unregister',\n        id,\n      })\n    }\n  }\n\n  function handleMutation(mutations: MutationRecord[]) {\n    let mutationWasInScope = false\n    // For each DOM mutation, we find the relevant element node and register or\n    // update it. This function doesn't handle checking if the node actually\n    // contains any relevant Sanity data, it just detects new or changed DOM\n    // elements and hands them off to `parseElements` to and determine if we\n    // have Sanity nodes\n    for (const mutation of mutations) {\n      const {target, type} = mutation\n      // We need to target an element, so if the mutated node was just a text\n      // change, we look at that node's parent instead\n      const node: Node | null = type === 'characterData' ? target.parentElement : target\n      // We ignore any nodes related to the overlay container element\n      if (node === overlayElement || overlayElement.contains(node)) {\n        continue\n      }\n\n      mutationWasInScope = true\n      if (isElementNode(node)) {\n        parseElements({childNodes: [node]})\n      }\n    }\n\n    // If the mutation is \"in scope\" (i.e. happened outside of the overlay\n    // container) we need to check if it removed any of the elements we are\n    // currently tracking\n    if (mutationWasInScope) {\n      for (const element of elementSet) {\n        if (!element.isConnected) {\n          unregisterElement(element)\n        }\n      }\n    }\n  }\n\n  function updateRect(el: ElementNode) {\n    const overlayElement = elementsMap.get(el)\n    if (overlayElement) {\n      handler({\n        type: 'element/updateRect',\n        id: overlayElement.id,\n        rect: getRect(el),\n      })\n    }\n  }\n\n  function handleResize(entries: ResizeObserverEntry[]) {\n    for (const entry of entries) {\n      const target = entry.target\n\n      if (isElementNode(target)) {\n        const element = measureElements.get(target)\n        if (!element) return\n        updateRect(element)\n      }\n    }\n  }\n\n  function handleIntersection(entries: IntersectionObserverEntry[]) {\n    if (!activated) return\n    for (const entry of entries) {\n      const {target} = entry\n      const match = isElementNode(target) && elementsMap.get(target)\n      if (!match) continue\n      if (entry.isIntersecting) {\n        activateElement(match)\n      } else {\n        deactivateElement(match)\n      }\n    }\n  }\n\n  function handleBlur(event: MouseEvent) {\n    const element = findOverlayElement(event.target)\n\n    if (element) {\n      if (element.dataset['sanityOverlayElement'] === 'capture') {\n        event.preventDefault()\n        event.stopPropagation()\n      }\n      return\n    }\n\n    hoverStack = []\n    handler({\n      type: 'overlay/blur',\n    })\n  }\n\n  function handleWindowResize() {\n    for (const element of elementSet) {\n      updateRect(element)\n    }\n  }\n\n  function handleKeydown(event: KeyboardEvent) {\n    if (event.key === 'Escape') {\n      hoverStack = []\n      handler({\n        type: 'overlay/blur',\n      })\n    }\n  }\n\n  function handleWindowScroll(event: Event) {\n    const {target} = event\n\n    if (target === window.document || !isElementNode(target)) {\n      return\n    }\n\n    for (const element of elementSet) {\n      if (target.contains(element)) {\n        updateRect(element)\n      }\n    }\n  }\n\n  function activate() {\n    if (activated) return\n    io = new IntersectionObserver(handleIntersection, {\n      threshold: 0.3,\n    })\n    elementSet.forEach((element) => io!.observe(element))\n    handler({\n      type: 'overlay/activate',\n    })\n    activated = true\n  }\n\n  function deactivate() {\n    if (!activated) return\n    io?.disconnect()\n    elementSet.forEach((element) => {\n      const overlayElement = elementsMap.get(element)\n      if (overlayElement) {\n        deactivateElement(overlayElement)\n      }\n    })\n    handler({\n      type: 'overlay/deactivate',\n    })\n    activated = false\n  }\n\n  function destroy() {\n    window.removeEventListener('click', handleBlur)\n    window.removeEventListener('contextmenu', handleBlur)\n    window.removeEventListener('keydown', handleKeydown)\n    window.removeEventListener('resize', handleWindowResize)\n    window.removeEventListener('scroll', handleWindowScroll)\n    mo.disconnect()\n    ro.disconnect()\n\n    elementSet.forEach((element) => {\n      unregisterElement(element)\n    })\n\n    elementIdMap.clear()\n    elementSet.clear()\n\n    hoverStack = []\n    deactivate()\n  }\n\n  function create() {\n    window.addEventListener('click', handleBlur)\n    window.addEventListener('contextmenu', handleBlur)\n    window.addEventListener('keydown', handleKeydown)\n    window.addEventListener('resize', handleWindowResize)\n    window.addEventListener('scroll', handleWindowScroll, {\n      capture: true,\n      passive: true,\n    })\n    ro = new ResizeObserver(handleResize)\n    mo = new MutationObserver(handleMutation)\n    mo.observe(document.body, {\n      attributes: true,\n      characterData: true,\n      childList: true,\n      subtree: true,\n    })\n\n    parseElements(document.body)\n    activate()\n  }\n\n  window.document.fonts.ready.then(() => {\n    for (const element of elementSet) {\n      updateRect(element)\n    }\n  })\n\n  create()\n\n  return {\n    activate,\n    deactivate,\n    destroy,\n  }\n}\n","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\nfunction v4(options, buf, offset) {\n    if (native.randomUUID && !buf && !options) {\n        return native.randomUUID();\n    }\n    options = options || {};\n    const rnds = options.random ?? options.rng?.() ?? rng();\n    if (rnds.length < 16) {\n        throw new Error('Random bytes length must be >= 16');\n    }\n    rnds[6] = (rnds[6] & 0x0f) | 0x40;\n    rnds[8] = (rnds[8] & 0x3f) | 0x80;\n    if (buf) {\n        offset = offset || 0;\n        if (offset < 0 || offset + 16 > buf.length) {\n            throw new RangeError(`UUID byte range ${offset}:${offset + 15} is out of buffer bounds`);\n        }\n        for (let i = 0; i < 16; ++i) {\n            buf[offset + i] = rnds[i];\n        }\n        return buf;\n    }\n    return unsafeStringify(rnds);\n}\nexport default v4;\n","import {createContext} from 'react'\nimport type {VisualEditingNode} from '../../types'\nimport type {SharedStateStore} from './sharedStateStore'\n\nexport interface SharedStateContextValue {\n  comlink?: VisualEditingNode\n  store: SharedStateStore\n}\n\nexport const SharedStateContext = createContext<SharedStateContextValue | null>(null)\n"],"names":["getPublishedId","useState","useEffect","startTransition","createContext","useEffectEvent","isEmptyActor","useOptimisticActor","decodeSanityNodeData","VERCEL_STEGA_REGEX","vercelStegaDecode","useOptimistic","passthrough","reducer","pristine","setPristine","optimistic","setOptimistic","lastEvent","setLastEvent","lastPassthrough","setLastPassthrough","actor","reduceStateFromAction","action","prevState","Array","isArray","reduce","acc","document","id","originalId","type","updateLastPassthrough","pristineTimeout","rebasedSub","on","_event","event","clearTimeout","pristineSub","setTimeout","unsubscribe","Error","byteToHex","i","push","toString","slice","getRandomValues","rnds8","Uint8Array","native","randomUUID","crypto","bind","getRect","element","domRect","getBoundingClientRect","x","scrollX","y","scrollY","w","width","h","height","offsetRect","rect","px","axis","rayIntersect","l1","l2","x1","y1","x2","y2","x3","y3","x4","y4","denominator","ua","ub","rectEqual","r1","r2","rayRectIntersections","line","rectLines","intersections","length","intersection","isDuplicate","j","sort","a","b","pointDist","p1","p2","Math","sqrt","findClosestIntersection","ray","targets","flow","rayOrigin","some","t","point","bounds","withinX","withinY","pointInBounds","min","closestIntersection","closestRect","target","firstIntersection","scaleRect","scale","origin","originX","originY","getRectGroupYExtent","rects","minGroupY","max","map","r","maxGroupY","body","scrollHeight","findRectSanityData","overlayGroup","find","e","elements","sanity","resolveInsertPosition","insertPosition","Object","values","every","v","left","right","top","bottom","calcMousePos","bodyBounds","clientX","clientY","window","buildPreviewSkeleton","mousePos","scaleFactor","children","querySelectorAll","childRects","child","tagName","offsetX","offsetY","maxWidth","calcGroupBoundsPreview","groupBoundsX","minGroupX","maxGroupX","offsetWidth","getRectGroupXExtent","groupBoundsY","canOffsetX","innerWidth","canOffsetY","canOffset","offsetDist","async","resetMinimapWrapperTransform","endYOrigin","prescaleHeight","handler","rectUpdateFrequency","previousRootStyleValues","Promise","resolve","transform","getComputedStyle","DOMMatrix","maxScroll","innerHeight","prevScrollY","addEventListener","style","transition","scrollTo","behavior","display","once","overflow","documentElement","minimapScaleApplied","mousePosInverseTransform","isElementNode","HTMLElement","SVGElement","findNonInlineElement","parent","parentElement","findOverlayElement","el","dataset","sanityOverlayElement","testAndDecodeStega","str","isAltText","input","lastIndex","test","decoded","href","replace","err","console","error","decodeStega","node","nodeType","Node","ELEMENT_NODE","isImgElement","isTimeElement","isSvgRootElement","toUpperCase","isSanityNode","findCommonPath","first","second","firstParts","split","secondParts","maxLength","reverse","parts","part","join","findCommonSanityData","nodes","n","_i","arr","sanityNodes","filter","common","consistentValueKeys","key","path","findSanityNodes","addElement","data","measureElement","childNodes","textContent","sanityEditTarget","nodesInTarget","commonData","TEXT_NODE","sanityEditInfo","alt","dateTime","ariaLabel","isSanityArrayPath","lastDotIndex","lastIndexOf","substring","includes","getSanityNodeArrayPath","sanityNodesExistInSameArray","sanityNode1","sanityNode2","resolveDragAndDropGroup","elementSet","elementsMap","getAttribute","targetDragGroup","group","elData","get","elDragDisabled","elDragGroup","elHasSanityAttribution","sharedDragGroup","createOverlayController","overlayElement","inFrame","inPopUp","optimisticActorReady","activated","elementIdMap","Map","WeakMap","Set","measureElements","cursorMap","ro","io","mo","activeDragSequence","hoverStack","getHoveredElement","removeEventHandlers","handlers","removeEventListener","click","capture","contextmenu","mousemove","mousedown","mouseenter","mouseleave","activateElement","addEventHandlers","observe","deactivateElement","unobserve","setOverlayCursor","hoverstackElement","targetSanityData","existingCursor","cursor","set","restoreOverlayCursor","previousCursor","registerElement","eventHandlers","contains","preventDefault","stopPropagation","sanity2","pop","position","currentTarget","at","dragGroup","opts","mouseEvent","onSequenceStart","onSequenceEnd","button","focus","t1","t2","disableMinimap","preventInsertDefault","documentHeightOverride","groupHeightOverride","initialMousePos","scaleTarget","minYScaled","groupHeight","padding","scaledRects","calcMinimapTransformValues","sequenceStarted","minimapPromptShown","rectsInterval","setInterval","applyMinimap","skeleton","transformOrigin","applyMinimapWrapperTransform","then","groupRect","handleScroll","abs","deltaY","shiftKey","dispatchEvent","CustomEvent","handleMouseMove","inverseMatrix","inverse","transformedPoint","DOMPoint","matrixTransform","calcMousePosInverseTransform","newInsertPosition","rayLeft","rayRight","rayTop","rayBottom","calcInsertPosition","JSON","stringify","handleMouseUp","clearInterval","removeFrameListeners","removeKeyListeners","removeMouseListeners","handleKeyup","handleBlur","handleOverlayDrag","querySelector","closest","leave","hoveredElement","relatedTarget","container","isInteractiveOverlayElement","addDeferredLeave","deferredLeave","options","rnds","random","rng","offset","toLowerCase","unsafeStringify","uuid","sanityNode","add","dragDisabled","updateElement","overlayElement2","parseElements","has","unregisterElement","delete","updateRect","handleIntersection","entries","entry","match","isIntersecting","handleWindowResize","handleKeydown","handleWindowScroll","activate","IntersectionObserver","threshold","forEach","deactivate","disconnect","fonts","ready","passive","ResizeObserver","MutationObserver","mutations","mutationWasInScope","mutation","isConnected","attributes","characterData","childList","subtree","destroy","clear","SharedStateContext"],"mappings":"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","x_google_ignoreList":[1,2,3,10]}